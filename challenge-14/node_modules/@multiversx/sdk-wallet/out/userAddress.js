"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAddress = void 0;
const bech32 = __importStar(require("bech32"));
const config_1 = require("./config");
const errors_1 = require("./errors");
/**
 * @internal
 * For internal use only.
 */
class UserAddress {
    constructor(buffer, hrp) {
        this.buffer = buffer;
        this.hrp = hrp || config_1.LibraryConfig.DefaultAddressHrp;
    }
    static newFromBech32(value) {
        const { hrp, pubkey } = decodeFromBech32({ value, allowCustomHrp: true });
        return new UserAddress(pubkey, hrp);
    }
    /**
     * @internal
     * @deprecated
     */
    static fromBech32(value) {
        // On this legacy flow, we do not accept addresses with custom hrp (in order to avoid behavioral breaking changes).
        const { hrp, pubkey } = decodeFromBech32({ value, allowCustomHrp: false });
        return new UserAddress(pubkey, hrp);
    }
    /**
     * Returns the hex representation of the address (pubkey)
     */
    hex() {
        return this.buffer.toString("hex");
    }
    /**
     * Returns the bech32 representation of the address
     */
    bech32() {
        const words = bech32.toWords(this.pubkey());
        const address = bech32.encode(this.hrp, words);
        return address;
    }
    /**
     * Returns the pubkey as raw bytes (buffer)
     */
    pubkey() {
        return this.buffer;
    }
    /**
     * Returns the bech32 representation of the address
     */
    toString() {
        return this.bech32();
    }
    /**
     * Converts the address to a pretty, plain JavaScript object.
     */
    toJSON() {
        return {
            bech32: this.bech32(),
            pubkey: this.hex()
        };
    }
}
exports.UserAddress = UserAddress;
function decodeFromBech32(options) {
    const value = options.value;
    const allowCustomHrp = options.allowCustomHrp;
    let hrp;
    let pubkey;
    try {
        const decoded = bech32.decode(value);
        hrp = decoded.prefix;
        pubkey = Buffer.from(bech32.fromWords(decoded.words));
    }
    catch (err) {
        throw new errors_1.ErrBadAddress(value, err);
    }
    // Workaround, in order to avoid behavioral breaking changes on legacy flows.
    if (!allowCustomHrp && hrp != config_1.LibraryConfig.DefaultAddressHrp) {
        throw new errors_1.ErrBadAddress(value);
    }
    return { hrp, pubkey };
}
//# sourceMappingURL=userAddress.js.map