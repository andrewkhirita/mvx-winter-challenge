import { IPlainTransactionObject, ITransaction } from "@multiversx/sdk-core/out/interface";
import { ITransactionOnNetwork } from "@multiversx/sdk-core/out/interfaceOfNetwork";
import { Transaction } from "@multiversx/sdk-core/out/transaction";
import { TransactionOutcome } from "@multiversx/sdk-core/out/transactionsOutcomeParsers/resources";
export declare class TransactionsConverter {
    transactionToPlainObject(transaction: ITransaction): IPlainTransactionObject;
    private toBase64OrUndefined;
    private toHexOrUndefined;
    plainObjectToTransaction(object: IPlainTransactionObject): Transaction;
    private bufferFromBase64;
    private bufferFromHex;
    /**
     * @deprecated Where {@link TransactionOutcome} was needed (throughout the SDK), pass the {@link ITransactionOnNetwork} object instead.
     *
     * Summarizes the outcome of a transaction on the network, and maps it to the "standard" resources (according to the sdk-specs).
     *
     * In the future, this converter function will become obsolete,
     * as the impedance mismatch between the network components and the "core" components will be reduced.
     */
    transactionOnNetworkToOutcome(transactionOnNetwork: ITransactionOnNetwork): TransactionOutcome;
    private smartContractResultOnNetworkToSmartContractResult;
    private eventOnNetworkToEvent;
}
