/// <reference types="node" />
import { ContractResults } from "@multiversx/sdk-core/out/networkProviders/contractResults";
import { IAddress, ITransaction, ITransactionNext } from "@multiversx/sdk-core/out/networkProviders/interface";
import { TransactionLogs } from "@multiversx/sdk-core/out/networkProviders/transactionLogs";
import { TransactionReceipt } from "@multiversx/sdk-core/out/networkProviders/transactionReceipt";
import { TransactionStatus } from "@multiversx/sdk-core/out/networkProviders/transactionStatus";
export declare function prepareTransactionForBroadcasting(transaction: ITransaction | ITransactionNext): any;
export declare class TransactionOnNetwork {
    isCompleted?: boolean;
    hash: string;
    type: string;
    nonce: number;
    round: number;
    epoch: number;
    value: string;
    receiver: IAddress;
    sender: IAddress;
    gasLimit: number;
    gasPrice: number;
    function: string;
    data: Buffer;
    signature: string;
    status: TransactionStatus;
    timestamp: number;
    blockNonce: number;
    hyperblockNonce: number;
    hyperblockHash: string;
    receipt: TransactionReceipt;
    contractResults: ContractResults;
    logs: TransactionLogs;
    constructor(init?: Partial<TransactionOnNetwork>);
    static fromProxyHttpResponse(txHash: string, response: any, processStatus?: TransactionStatus | undefined): TransactionOnNetwork;
    static fromApiHttpResponse(txHash: string, response: any): TransactionOnNetwork;
    private static fromHttpResponse;
    getDateTime(): Date;
}
