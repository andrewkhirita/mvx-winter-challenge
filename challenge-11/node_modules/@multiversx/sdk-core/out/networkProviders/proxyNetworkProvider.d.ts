import { AccountOnNetwork, GuardianData } from "@multiversx/sdk-core/out/networkProviders/accounts";
import { ContractQueryResponse } from "@multiversx/sdk-core/out/networkProviders/contractQueryResponse";
import { IAddress, IContractQuery, INetworkProvider, IPagination, ITransaction, ITransactionNext } from "@multiversx/sdk-core/out/networkProviders/interface";
import { NetworkConfig } from "@multiversx/sdk-core/out/networkProviders/networkConfig";
import { NetworkGeneralStatistics } from "@multiversx/sdk-core/out/networkProviders/networkGeneralStatistics";
import { NetworkProviderConfig } from "@multiversx/sdk-core/out/networkProviders/networkProviderConfig";
import { NetworkStake } from "@multiversx/sdk-core/out/networkProviders/networkStake";
import { NetworkStatus } from "@multiversx/sdk-core/out/networkProviders/networkStatus";
import { DefinitionOfFungibleTokenOnNetwork, DefinitionOfTokenCollectionOnNetwork } from "@multiversx/sdk-core/out/networkProviders/tokenDefinitions";
import { FungibleTokenOfAccountOnNetwork, NonFungibleTokenOfAccountOnNetwork } from "@multiversx/sdk-core/out/networkProviders/tokens";
import { TransactionOnNetwork } from "@multiversx/sdk-core/out/networkProviders/transactions";
import { TransactionStatus } from "@multiversx/sdk-core/out/networkProviders/transactionStatus";
export declare class ProxyNetworkProvider implements INetworkProvider {
    private url;
    private config;
    private userAgentPrefix;
    private axios;
    constructor(url: string, config?: NetworkProviderConfig);
    getNetworkConfig(): Promise<NetworkConfig>;
    getNetworkStatus(): Promise<NetworkStatus>;
    getNetworkStakeStatistics(): Promise<NetworkStake>;
    getNetworkGeneralStatistics(): Promise<NetworkGeneralStatistics>;
    getAccount(address: IAddress): Promise<AccountOnNetwork>;
    getGuardianData(address: IAddress): Promise<GuardianData>;
    getFungibleTokensOfAccount(address: IAddress, _pagination?: IPagination): Promise<FungibleTokenOfAccountOnNetwork[]>;
    getNonFungibleTokensOfAccount(address: IAddress, _pagination?: IPagination): Promise<NonFungibleTokenOfAccountOnNetwork[]>;
    getFungibleTokenOfAccount(address: IAddress, tokenIdentifier: string): Promise<FungibleTokenOfAccountOnNetwork>;
    getNonFungibleTokenOfAccount(address: IAddress, collection: string, nonce: number): Promise<NonFungibleTokenOfAccountOnNetwork>;
    getTransaction(txHash: string, _?: boolean): Promise<TransactionOnNetwork>;
    getTransactionStatus(txHash: string): Promise<TransactionStatus>;
    sendTransaction(tx: ITransaction | ITransactionNext): Promise<string>;
    sendTransactions(txs: (ITransaction | ITransactionNext)[]): Promise<string[]>;
    simulateTransaction(tx: ITransaction | ITransactionNext): Promise<any>;
    queryContract(query: IContractQuery): Promise<ContractQueryResponse>;
    getDefinitionOfFungibleToken(tokenIdentifier: string): Promise<DefinitionOfFungibleTokenOnNetwork>;
    private getTokenProperties;
    getDefinitionOfTokenCollection(collection: string): Promise<DefinitionOfTokenCollectionOnNetwork>;
    getNonFungibleToken(_collection: string, _nonce: number): Promise<NonFungibleTokenOfAccountOnNetwork>;
    doGetGeneric(resourceUrl: string): Promise<any>;
    doPostGeneric(resourceUrl: string, payload: any): Promise<any>;
    private doGet;
    private doPost;
    private buildUrlWithQueryParameters;
    private handleApiError;
}
