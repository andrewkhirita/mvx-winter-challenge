"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const chai_1 = require("chai");
const apiNetworkProvider_1 = require("./apiNetworkProvider");
const primitives_1 = require("./primitives");
const proxyNetworkProvider_1 = require("./proxyNetworkProvider");
const dummyQuery_1 = require("./testscommon/dummyQuery");
const transactionEvents_1 = require("./transactionEvents");
describe("test network providers on devnet: Proxy and API", function () {
    let alice = new primitives_1.Address("erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th");
    let carol = new primitives_1.Address("erd1k2s324ww2g0yj38qn2ch2jwctdy8mnfxep94q9arncc6xecg3xaq6mjse8");
    let dan = new primitives_1.Address("erd1kyaqzaprcdnv4luvanah0gfxzzsnpaygsy6pytrexll2urtd05ts9vegu7");
    const MAX_NUMBER_OF_ITEMS_BY_DEFAULT = 20;
    let apiProvider = new apiNetworkProvider_1.ApiNetworkProvider("https://devnet-api.multiversx.com", { timeout: 10000, clientName: 'test' });
    let proxyProvider = new proxyNetworkProvider_1.ProxyNetworkProvider("https://devnet-gateway.multiversx.com", { timeout: 10000, clientName: 'test' });
    it("should create providers without configuration", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const apiProviderWithoutConfig = new apiNetworkProvider_1.ApiNetworkProvider("https://devnet-api.multiversx.com");
            const proxyProviderWithoutConfig = new proxyNetworkProvider_1.ProxyNetworkProvider("https://devnet-gateway.multiversx.com");
            const apiResponse = yield apiProviderWithoutConfig.getNetworkConfig();
            const proxyResponse = yield proxyProviderWithoutConfig.getNetworkConfig();
            chai_1.assert.equal(apiResponse.ChainID, "D");
            chai_1.assert.equal(proxyResponse.ChainID, "D");
        });
    });
    it("should have same response for getNetworkConfig()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let apiResponse = yield apiProvider.getNetworkConfig();
            let proxyResponse = yield proxyProvider.getNetworkConfig();
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
        });
    });
    it("should add userAgent unknown for clientName when no clientName passed", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const expectedApiUserAgent = "multiversx-sdk/api/unknown";
            const expectedProxyUserAgent = "multiversx-sdk/proxy/unknown";
            let localApiProvider = new apiNetworkProvider_1.ApiNetworkProvider("https://devnet-api.multiversx.com", { timeout: 10000 });
            let localProxyProvider = new proxyNetworkProvider_1.ProxyNetworkProvider("https://devnet-gateway.multiversx.com", { timeout: 10000 });
            chai_1.assert.equal(localApiProvider.config.headers.getUserAgent(), expectedApiUserAgent);
            chai_1.assert.equal(localProxyProvider.config.headers.getUserAgent(), expectedProxyUserAgent);
        });
    });
    it("should set userAgent with specified clientName ", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const expectedApiUserAgent = "multiversx-sdk/api/test";
            const expectedProxyUserAgent = "multiversx-sdk/proxy/test";
            let localApiProvider = new apiNetworkProvider_1.ApiNetworkProvider("https://devnet-api.multiversx.com", { timeout: 10000, clientName: 'test' });
            let localProxyProvider = new proxyNetworkProvider_1.ProxyNetworkProvider("https://devnet-gateway.multiversx.com", { timeout: 10000, clientName: 'test' });
            chai_1.assert.equal(localApiProvider.config.headers.getUserAgent(), expectedApiUserAgent);
            chai_1.assert.equal(localProxyProvider.config.headers.getUserAgent(), expectedProxyUserAgent);
        });
    });
    it("should keep the set userAgent and add the sdk to it", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const expectedApiUserAgent = "Client-info multiversx-sdk/api/test";
            const expectedProxyUserAgent = "Client-info multiversx-sdk/proxy/test";
            let localApiProvider = new apiNetworkProvider_1.ApiNetworkProvider("https://devnet-api.multiversx.com", { timeout: 10000, headers: new axios_1.AxiosHeaders({ "User-Agent": "Client-info" }), clientName: 'test' });
            let localProxyProvider = new proxyNetworkProvider_1.ProxyNetworkProvider("https://devnet-gateway.multiversx.com", { timeout: 10000, headers: new axios_1.AxiosHeaders({ "User-Agent": "Client-info" }), clientName: 'test' });
            chai_1.assert.equal(localApiProvider.config.headers.getUserAgent(), expectedApiUserAgent);
            chai_1.assert.equal(localProxyProvider.config.headers.getUserAgent(), expectedProxyUserAgent);
        });
    });
    it("should have same response for getNetworkStatus()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let apiResponse = yield apiProvider.getNetworkStatus();
            let proxyResponse = yield proxyProvider.getNetworkStatus();
            chai_1.assert.equal(apiResponse.EpochNumber, proxyResponse.EpochNumber);
            chai_1.assert.equal(apiResponse.NonceAtEpochStart, proxyResponse.NonceAtEpochStart);
            chai_1.assert.equal(apiResponse.RoundAtEpochStart, proxyResponse.RoundAtEpochStart);
            chai_1.assert.equal(apiResponse.RoundsPerEpoch, proxyResponse.RoundsPerEpoch);
            // done this way because the nonces may change until both requests are executed
            chai_1.assert.approximately(apiResponse.CurrentRound, proxyResponse.CurrentRound, 1);
            chai_1.assert.approximately(apiResponse.HighestFinalNonce, proxyResponse.HighestFinalNonce, 1);
            chai_1.assert.approximately(apiResponse.Nonce, proxyResponse.Nonce, 1);
            chai_1.assert.approximately(apiResponse.NoncesPassedInCurrentEpoch, proxyResponse.NoncesPassedInCurrentEpoch, 1);
        });
    });
    // TODO: Enable test after implementing ProxyNetworkProvider.getNetworkStakeStatistics().
    it.skip("should have same response for getNetworkStakeStatistics()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let apiResponse = yield apiProvider.getNetworkStakeStatistics();
            let proxyResponse = yield proxyProvider.getNetworkStakeStatistics();
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
        });
    });
    // TODO: Enable test after implementing ProxyNetworkProvider.getNetworkGeneralStatistics().
    it.skip("should have same response for getNetworkGeneralStatistics()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let apiResponse = yield apiProvider.getNetworkGeneralStatistics();
            let proxyResponse = yield proxyProvider.getNetworkGeneralStatistics();
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
        });
    });
    it("should have same response for getAccount()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let apiResponse = yield apiProvider.getAccount(alice);
            let proxyResponse = yield proxyProvider.getAccount(alice);
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
        });
    });
    it("should have same response for getFungibleTokensOfAccount(), getFungibleTokenOfAccount()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(30000);
            for (const user of [carol, dan]) {
                let apiResponse = (yield apiProvider.getFungibleTokensOfAccount(user)).slice(0, MAX_NUMBER_OF_ITEMS_BY_DEFAULT);
                let proxyResponse = (yield proxyProvider.getFungibleTokensOfAccount(user)).slice(0, MAX_NUMBER_OF_ITEMS_BY_DEFAULT);
                for (let i = 0; i < apiResponse.length; i++) {
                    chai_1.assert.equal(apiResponse[i].identifier, proxyResponse[i].identifier);
                    chai_1.assert.equal(apiResponse[i].balance.valueOf, proxyResponse[i].balance.valueOf);
                }
            }
        });
    });
    it("should have same response for getNonFungibleTokensOfAccount(), getNonFungibleTokenOfAccount", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(30000);
            let apiResponse = (yield apiProvider.getNonFungibleTokensOfAccount(dan)).slice(0, MAX_NUMBER_OF_ITEMS_BY_DEFAULT);
            let proxyResponse = (yield proxyProvider.getNonFungibleTokensOfAccount(dan)).slice(0, MAX_NUMBER_OF_ITEMS_BY_DEFAULT);
            chai_1.assert.isTrue(apiResponse.length > 0, "For the sake of the test, there should be at least one item.");
            chai_1.assert.equal(apiResponse.length, proxyResponse.length);
            for (let i = 0; i < apiResponse.length; i++) {
                removeInconsistencyForNonFungibleTokenOfAccount(apiResponse[i], proxyResponse[i]);
            }
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
            const item = apiResponse[0];
            let apiItemResponse = yield apiProvider.getNonFungibleTokenOfAccount(dan, item.collection, item.nonce);
            let proxyItemResponse = yield proxyProvider.getNonFungibleTokenOfAccount(dan, item.collection, item.nonce);
            removeInconsistencyForNonFungibleTokenOfAccount(apiItemResponse, proxyItemResponse);
            chai_1.assert.deepEqual(apiResponse, proxyResponse, `user: ${dan.bech32()}, token: ${item.identifier}`);
        });
    });
    // TODO: Strive to have as little differences as possible between Proxy and API.
    function removeInconsistencyForNonFungibleTokenOfAccount(apiResponse, proxyResponse) {
        // unset unconsistent fields
        apiResponse.type = "";
        proxyResponse.type = "";
        apiResponse.name = "";
        proxyResponse.name = "";
        apiResponse.decimals = 0;
        proxyResponse.decimals = 0;
    }
    it("should be able to send transaction(s)", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(5000);
            const txs = [
                {
                    toSendable: function () {
                        return {
                            "nonce": 42,
                            "value": "1",
                            "receiver": "erd1testnlersh4z0wsv8kjx39me4rmnvjkwu8dsaea7ukdvvc9z396qykv7z7",
                            "sender": "erd15x2panzqvfxul2lvstfrmdcl5t4frnsylfrhng8uunwdssxw4y9succ9sq",
                            "gasPrice": 1000000000,
                            "gasLimit": 50000,
                            "chainID": "D",
                            "version": 1,
                            "signature": "c8eb539e486db7d703d8c70cab3b7679113f77c4685d8fcc94db027ceacc6b8605115034355386dffd7aa12e63dbefa03251a2f1b1d971f52250187298d12900"
                        };
                    }
                },
                {
                    toSendable: function () {
                        return {
                            "nonce": 43,
                            "value": "1",
                            "receiver": "erd1testnlersh4z0wsv8kjx39me4rmnvjkwu8dsaea7ukdvvc9z396qykv7z7",
                            "sender": "erd15x2panzqvfxul2lvstfrmdcl5t4frnsylfrhng8uunwdssxw4y9succ9sq",
                            "gasPrice": 1000000000,
                            "gasLimit": 50000,
                            "chainID": "D",
                            "version": 1,
                            "signature": "9c4c22d0ae1b5a10c39583a5ab9020b00b27aa69d4ac8ab4922620dbf0df4036ed890f9946d38a9d0c85d6ac485c0d9b2eac0005e752f249fd0ad863b0471d02"
                        };
                    }
                },
                {
                    toSendable: function () {
                        return {
                            "nonce": 44
                        };
                    }
                }
            ];
            const expectedHashes = [
                "6e2fa63ea02937f00d7549f3e4eb9af241e4ac13027aa65a5300816163626c01",
                "37d7e84313a5baea2a61c6ab10bb29b52bc54f7ac9e3918a9faeb1e08f42081c",
                null
            ];
            chai_1.assert.equal(yield apiProvider.sendTransaction(txs[0]), expectedHashes[0]);
            chai_1.assert.equal(yield proxyProvider.sendTransaction(txs[1]), expectedHashes[1]);
            chai_1.assert.deepEqual(yield apiProvider.sendTransactions(txs), expectedHashes);
            chai_1.assert.deepEqual(yield proxyProvider.sendTransactions(txs), expectedHashes);
        });
    });
    it("should have same response for getTransaction()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(20000);
            let hashes = [
                "08acf8cbd71306a56eb58f9593cb2e23f109c94e27acdd906c82a5c3a5f84d9d",
                "410efb1db2ab86678b8dbc503beb695b5b7d52754fb0de86c09cbb433de5f6a8"
            ];
            for (const hash of hashes) {
                let apiResponse = yield apiProvider.getTransaction(hash);
                let proxyResponse = yield proxyProvider.getTransaction(hash, true);
                ignoreKnownTransactionDifferencesBetweenProviders(apiResponse, proxyResponse);
                chai_1.assert.deepEqual(apiResponse, proxyResponse, `transaction: ${hash}`);
                // Also assert completion
                chai_1.assert.isTrue(apiResponse.isCompleted);
                chai_1.assert.isTrue(proxyResponse.isCompleted);
            }
        });
    });
    // TODO: Strive to have as little differences as possible between Proxy and API.
    function ignoreKnownTransactionDifferencesBetweenProviders(apiResponse, proxyResponse) {
        // Proxy and API exhibit differences in the "function" field, in case of move-balance transactions.
        apiResponse.function = proxyResponse.function;
        // Ignore fields which are not present on API response:
        proxyResponse.epoch = 0;
        proxyResponse.blockNonce = 0;
        proxyResponse.hyperblockNonce = 0;
        proxyResponse.hyperblockHash = "";
    }
    it("should have the same response for transactions with events", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = "1b04eb849cf87f2d3086c77b4b825d126437b88014327bbf01437476751cb040";
            let apiResponse = yield apiProvider.getTransaction(hash);
            let proxyResponse = yield proxyProvider.getTransaction(hash);
            chai_1.assert.exists(apiResponse.logs);
            chai_1.assert.exists(proxyResponse.logs);
            chai_1.assert.exists(apiResponse.logs.events);
            chai_1.assert.exists(proxyResponse.logs.events);
            chai_1.assert.equal(apiResponse.logs.events[0].topics[0].hex(), "414c4943452d353632376631");
            chai_1.assert.equal(apiResponse.logs.events[0].topics[1].hex(), "");
            chai_1.assert.equal(apiResponse.logs.events[0].topics[2].hex(), "01");
            chai_1.assert.equal(apiResponse.logs.events[0].topics[3].hex(), "0000000000000000050032e141d21536e2dfc3d64b9e7dd0c2c53f201dc469e1");
            chai_1.assert.equal(proxyResponse.logs.events[0].topics[0].hex(), "414c4943452d353632376631");
            chai_1.assert.equal(proxyResponse.logs.events[0].topics[1].hex(), "");
            chai_1.assert.equal(proxyResponse.logs.events[0].topics[2].hex(), "01");
            chai_1.assert.equal(proxyResponse.logs.events[0].topics[3].hex(), "0000000000000000050032e141d21536e2dfc3d64b9e7dd0c2c53f201dc469e1");
        });
    });
    it("should have same response for getTransactionStatus()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(20000);
            let hashes = [
                "08acf8cbd71306a56eb58f9593cb2e23f109c94e27acdd906c82a5c3a5f84d9d",
                "410efb1db2ab86678b8dbc503beb695b5b7d52754fb0de86c09cbb433de5f6a8"
            ];
            for (const hash of hashes) {
                let apiResponse = yield apiProvider.getTransactionStatus(hash);
                let proxyResponse = yield proxyProvider.getTransactionStatus(hash);
                chai_1.assert.deepEqual(apiResponse, proxyResponse, `transaction: ${hash}`);
            }
        });
    });
    it("should have same response for getDefinitionOfFungibleToken()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(10000);
            let identifier = "CHOCOLATE-daf625";
            let apiResponse = yield apiProvider.getDefinitionOfFungibleToken(identifier);
            let proxyResponse = yield proxyProvider.getDefinitionOfFungibleToken(identifier);
            // Assets are only present on API responses, thus we ignore them for comparison.
            apiResponse.assets = {};
            chai_1.assert.equal(apiResponse.identifier, identifier);
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
        });
    });
    it("should have same response for getDefinitionOfTokenCollection()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(10000);
            let collections = ["TEST-37adcf"];
            for (const collection of collections) {
                let apiResponse = yield apiProvider.getDefinitionOfTokenCollection(collection);
                let proxyResponse = yield proxyProvider.getDefinitionOfTokenCollection(collection);
                chai_1.assert.equal(apiResponse.collection, collection);
                chai_1.assert.deepEqual(apiResponse, proxyResponse);
            }
        });
    });
    it("should have same response for getNonFungibleToken()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(10000);
            let tokens = [{ id: "TEST-37adcf", nonce: 1 }];
            for (const token of tokens) {
                let apiResponse = yield apiProvider.getNonFungibleToken(token.id, token.nonce);
                chai_1.assert.equal(apiResponse.collection, token.id);
                // TODO: Uncomment after implementing the function in the proxy provider.
                // let proxyResponse = await proxyProvider.getNonFungibleToken(token.id, token.nonce);
                // assert.deepEqual(apiResponse, proxyResponse);
            }
        });
    });
    it("should have same response for queryContract()", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(10000);
            // Query: get sum (of adder contract)
            let query = new dummyQuery_1.MockQuery({
                address: new primitives_1.Address("erd1qqqqqqqqqqqqqpgqfzydqmdw7m2vazsp6u5p95yxz76t2p9rd8ss0zp9ts"),
                func: "getSum"
            });
            let apiResponse = yield apiProvider.queryContract(query);
            let proxyResponse = yield proxyProvider.queryContract(query);
            // Ignore "gasUsed" due to numerical imprecision (API).
            apiResponse.gasUsed = 0;
            proxyResponse.gasUsed = 0;
            chai_1.assert.deepEqual(apiResponse, proxyResponse);
            chai_1.assert.deepEqual(apiResponse.getReturnDataParts(), proxyResponse.getReturnDataParts());
        });
    });
    it("should handle events 'data' and 'additionalData'", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(50000);
            const apiResponse = yield apiProvider.getTransaction("a419271407a2ec217739811805e3a751e30dbc72ae0777e3b4c825f036995184");
            const proxyResponse = yield proxyProvider.getTransaction("a419271407a2ec217739811805e3a751e30dbc72ae0777e3b4c825f036995184");
            chai_1.assert.equal(apiResponse.logs.events[0].data, Buffer.from("test").toString());
            chai_1.assert.equal(proxyResponse.logs.events[0].data, Buffer.from("test").toString());
            chai_1.assert.deepEqual(apiResponse.logs.events[0].dataPayload, transactionEvents_1.TransactionEventData.fromBase64("dGVzdA=="));
            chai_1.assert.deepEqual(proxyResponse.logs.events[0].dataPayload, transactionEvents_1.TransactionEventData.fromBase64("dGVzdA=="));
            chai_1.assert.deepEqual(apiResponse.logs.events[0].additionalData, [transactionEvents_1.TransactionEventData.fromBase64("dGVzdA==")]);
            chai_1.assert.deepEqual(proxyResponse.logs.events[0].additionalData, [transactionEvents_1.TransactionEventData.fromBase64("dGVzdA==")]);
        });
    });
    it("should send both `Transaction` and `TransactionNext`", function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(50000);
            const transaction = {
                toSendable: function () {
                    return {
                        "nonce": 7,
                        "value": "0",
                        "receiver": "erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th",
                        "sender": "erd1zztjf9fhwvuvquzsllknq4qcmffwad6n0hjtn5dyzytr5tgz7uas0mkgrq",
                        "gasPrice": 1000000000,
                        "gasLimit": 50000,
                        "chainID": "D",
                        "version": 2,
                        "signature": "149f1d8296efcb9489c5b3142ae659aacfa3a7daef3645f1d3747a96dc9cee377070dd8b83b322997c15ba3c305ac18daaee0fd25760eba334b14a9272b34802"
                    };
                }
            };
            const transactionNext = {
                nonce: BigInt(8),
                value: BigInt(0),
                receiver: "erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th",
                sender: "erd1zztjf9fhwvuvquzsllknq4qcmffwad6n0hjtn5dyzytr5tgz7uas0mkgrq",
                data: new Uint8Array(Buffer.from("test")),
                gasPrice: BigInt(1000000000),
                gasLimit: BigInt(80000),
                chainID: "D",
                version: 2,
                signature: Buffer.from("3fa42d97b4f85442850340a11411a3cbd63885e06ff3f84c7a75d0ef59c780f7a18aa4f331cf460300bc8bd99352aea10b7c3bc17e40287337ae9f9842470205", "hex"),
                senderUsername: "",
                receiverUsername: "",
                guardian: "",
                guardianSignature: new Uint8Array(),
                options: 0
            };
            const apiLegacyTxHash = yield apiProvider.sendTransaction(transaction);
            const apiTxNextHash = yield apiProvider.sendTransaction(transactionNext);
            const proxyLegacyTxHash = yield proxyProvider.sendTransaction(transaction);
            const proxyTxNextHash = yield proxyProvider.sendTransaction(transactionNext);
            chai_1.assert.equal(apiLegacyTxHash, proxyLegacyTxHash);
            chai_1.assert.equal(apiTxNextHash, proxyTxNextHash);
        });
    });
});
//# sourceMappingURL=providers.dev.net.spec.js.map