{"$message_type":"diagnostic","message":"the trait bound `ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>: TypeAbiFrom<&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/citizen.rs","byte_start":3112,"byte_end":3128,"line_start":95,"line_end":95,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                &BigUint::zero(),","highlight_start":17,"highlight_end":33}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/citizen.rs","byte_start":2976,"byte_end":2994,"line_start":92,"line_end":92,"column_start":14,"column_end":32,"is_primary":false,"text":[{"text":"            .issue_non_fungible(","highlight_start":14,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `TypeAbiFrom<&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>>` is not implemented for `ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `TypeAbiFrom<T>`:\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&BoxedBytes>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&ManagedBuffer<M>>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&String>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&Vec<u8>>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&[u8; N]>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&[u8]>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<&str>`\n  `ManagedBuffer<M>` implements `TypeAbiFrom<BoxedBytes>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>` to implement `ProxyArg<ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ESDTSystemSCProxyMethods::<Env, From, To, Gas>::issue_non_fungible`","code":null,"level":"note","spans":[{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multiversx-sc-0.54.6/src/types/interaction/system_proxy/esdt_system_sc_proxy.rs","byte_start":3283,"byte_end":3301,"line_start":101,"line_end":101,"column_start":12,"column_end":30,"is_primary":false,"text":[{"text":"    pub fn issue_non_fungible<","highlight_start":12,"highlight_end":30}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multiversx-sc-0.54.6/src/types/interaction/system_proxy/esdt_system_sc_proxy.rs","byte_start":3366,"byte_end":3399,"line_start":103,"line_end":103,"column_start":15,"column_end":48,"is_primary":true,"text":[{"text":"        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,","highlight_start":15,"highlight_end":48}],"label":"required by this bound in `ESDTSystemSCProxyMethods::<Env, From, To, Gas>::issue_non_fungible`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>: TypeAbiFrom<&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/citizen.rs:95:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .issue_non_fungible(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &BigUint::zero(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `TypeAbiFrom<&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>>` is not implemented for `ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TypeAbiFrom<T>`:\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&BoxedBytes>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&ManagedBuffer<M>>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&String>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&Vec<u8>>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&[u8; N]>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&[u8]>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<&str>`\u001b[0m\n\u001b[0m              `ManagedBuffer<M>` implements `TypeAbiFrom<BoxedBytes>`\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>` to implement `ProxyArg<ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ESDTSystemSCProxyMethods::<Env, From, To, Gas>::issue_non_fungible`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrewkhirita/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multiversx-sc-0.54.6/src/types/interaction/system_proxy/esdt_system_sc_proxy.rs:103:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn issue_non_fungible<\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ESDTSystemSCProxyMethods::<Env, From, To, Gas>::issue_non_fungible`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/citizen.rs","byte_start":3012,"byte_end":3044,"line_start":93,"line_end":93,"column_start":17,"column_end":49,"is_primary":true,"text":[{"text":"                &ManagedBuffer::from(b\"CITIZEN\"),","highlight_start":17,"highlight_end":49}],"label":"expected `BigUint<<... as ContractBase>::Api>`, found `&ManagedBuffer<...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/citizen.rs","byte_start":2976,"byte_end":2994,"line_start":92,"line_end":92,"column_start":14,"column_end":32,"is_primary":false,"text":[{"text":"            .issue_non_fungible(","highlight_start":14,"highlight_end":32}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>`\nfound reference `&ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multiversx-sc-0.54.6/src/types/interaction/system_proxy/esdt_system_sc_proxy.rs","byte_start":3283,"byte_end":3301,"line_start":101,"line_end":101,"column_start":12,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn issue_non_fungible<","highlight_start":12,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"call `Into::into` on this expression to convert `&ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>` into `multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>`","code":null,"level":"help","spans":[{"file_name":"src/citizen.rs","byte_start":3012,"byte_end":3012,"line_start":93,"line_end":93,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                &ManagedBuffer::from(b\"CITIZEN\"),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/citizen.rs","byte_start":3044,"byte_end":3044,"line_start":93,"line_end":93,"column_start":49,"column_end":49,"is_primary":true,"text":[{"text":"                &ManagedBuffer::from(b\"CITIZEN\"),","highlight_start":49,"highlight_end":49}],"label":null,"suggested_replacement":").into()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/citizen.rs:93:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .issue_non_fungible(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &ManagedBuffer::from(b\"CITIZEN\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `BigUint<<... as ContractBase>::Api>`, found `&ManagedBuffer<...>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found reference `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrewkhirita/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multiversx-sc-0.54.6/src/types/interaction/system_proxy/esdt_system_sc_proxy.rs:101:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn issue_non_fungible<\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: call `Into::into` on this expression to convert `&ManagedBuffer<<Self as multiversx_sc::contract_base::ContractBase>::Api>` into `multiversx_sc::types::BigUint<<Self as multiversx_sc::contract_base::ContractBase>::Api>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0m&ManagedBuffer::from(b\"CITIZEN\")\u001b[0m\u001b[0m\u001b[38;5;10m).into()\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
