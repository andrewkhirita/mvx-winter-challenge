"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mnemonic = void 0;
const bip39_1 = require("bip39");
const ed25519_hd_key_1 = require("ed25519-hd-key");
const errors_1 = require("./errors");
const userKeys_1 = require("./userKeys");
const MNEMONIC_STRENGTH = 256;
const BIP44_DERIVATION_PREFIX = "m/44'/508'/0'/0'";
class Mnemonic {
    constructor(text) {
        this.text = text;
    }
    static generate() {
        const text = bip39_1.generateMnemonic(MNEMONIC_STRENGTH);
        return new Mnemonic(text);
    }
    static fromString(text) {
        text = text.trim();
        Mnemonic.assertTextIsValid(text);
        return new Mnemonic(text);
    }
    static fromEntropy(entropy) {
        try {
            const text = bip39_1.entropyToMnemonic(Buffer.from(entropy));
            return new Mnemonic(text);
        }
        catch (err) {
            throw new errors_1.ErrBadMnemonicEntropy(err);
        }
    }
    static assertTextIsValid(text) {
        let isValid = bip39_1.validateMnemonic(text);
        if (!isValid) {
            throw new errors_1.ErrWrongMnemonic();
        }
    }
    deriveKey(addressIndex = 0, password = "") {
        let seed = bip39_1.mnemonicToSeedSync(this.text, password);
        let derivationPath = `${BIP44_DERIVATION_PREFIX}/${addressIndex}'`;
        let derivationResult = ed25519_hd_key_1.derivePath(derivationPath, seed.toString("hex"));
        let key = derivationResult.key;
        return new userKeys_1.UserSecretKey(key);
    }
    getWords() {
        return this.text.split(" ");
    }
    getEntropy() {
        const entropy = bip39_1.mnemonicToEntropy(this.text);
        return Buffer.from(entropy, "hex");
    }
    toString() {
        return this.text;
    }
}
exports.Mnemonic = Mnemonic;
//# sourceMappingURL=mnemonic.js.map